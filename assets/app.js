/**
 * Mini Flowy - Main Application Logic
 * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const state = {
  pages: [],
  fuse: null,
  pzOn: true,
  theme: localStorage.getItem('theme') || 'light',
  colorScheme: localStorage.getItem('colorScheme') || 'blue',
  pzInstances: [],
  isFileProtocol: location.protocol === 'file:',
  activeTags: new Set(), // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–µ–≥–∞–º
  filteredPages: [], // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  collapsedCategories: new Set(), // –°–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  isolatedMode: false,
  isolatedCategory: null,
  isolatedPages: [],
  routeInitialized: false
};

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏ –∏ —Ü–≤–µ—Ç–æ–≤—ã–º–∏ —Å—Ö–µ–º–∞–º–∏
function setTheme(t) {
  state.theme = t;
  localStorage.setItem('theme', t);
  document.documentElement.setAttribute('data-theme', t === 'dark' ? 'dark' : '');
  mermaid.initialize({
    startOnLoad: false,
    securityLevel: 'loose',
    theme: t === 'dark' ? 'dark' : 'default',
    flowchart: {
      useMaxWidth: true,
      htmlLabels: true,
      curve: 'basis'
    },
    themeVariables: {
      fontSize: '16px'
    }
  });
}

function setColorScheme(scheme) {
  state.colorScheme = scheme;
  localStorage.setItem('colorScheme', scheme);
  document.documentElement.setAttribute('data-color-scheme', scheme === 'blue' ? '' : scheme);
}

// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã
const colorSchemes = {
  blue: { name: '–°–∏–Ω–∏–π', icon: 'üîµ' },
  emerald: { name: '–ò–∑—É–º—Ä—É–¥–Ω—ã–π', icon: 'üü¢' },
  purple: { name: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', icon: 'üü£' },
  amber: { name: '–Ø–Ω—Ç–∞—Ä–Ω—ã–π', icon: 'üü°' },
  rose: { name: '–†–æ–∑–æ–≤—ã–π', icon: 'üåπ' },
  slate: { name: '–°–µ—Ä—ã–π', icon: '‚ö´' }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã –∏ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
setTheme(state.theme);
setColorScheme(state.colorScheme);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
document.getElementById('theme').onclick = () => setTheme(state.theme === 'dark' ? 'light' : 'dark');

// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å—Ö–µ–º
function createColorSchemeSelector() {
  const themeBtn = document.getElementById('theme');
  const colorBtn = document.createElement('button');
  colorBtn.className = 'btn';
  colorBtn.id = 'colorScheme';
  colorBtn.innerHTML = colorSchemes[state.colorScheme].icon;
  colorBtn.title = `–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: ${colorSchemes[state.colorScheme].name}`;
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ —Ç–µ–º—ã
  themeBtn.parentNode.insertBefore(colorBtn, themeBtn.nextSibling);
  
  colorBtn.onclick = () => {
    // –¶–∏–∫–ª–∏—á–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ö–µ–º—ã
    const schemes = Object.keys(colorSchemes);
    const currentIndex = schemes.indexOf(state.colorScheme);
    const nextIndex = (currentIndex + 1) % schemes.length;
    const nextScheme = schemes[nextIndex];
    
    setColorScheme(nextScheme);
    colorBtn.innerHTML = colorSchemes[nextScheme].icon;
    colorBtn.title = `–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: ${colorSchemes[nextScheme].name}`;
  };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
setTimeout(createColorSchemeSelector, 100);

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –∏ SEO
function updateMetaTags(page) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π baseUrl –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  const isGitHubPages = location.hostname.includes('github.io');
  const baseUrl = isGitHubPages ? 
    'https://andrewmoryakov.github.io/mini-flowy-public/' : 
    location.origin + location.pathname;
    
  const pageUrl = baseUrl + '#/p/' + page.slug;
  const pageTitle = page.title + ' - Mini Flowy';
  const pageDescription = `${page.title} | Markdown + Mermaid –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∑—É–º–æ–º`;

  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  document.title = pageTitle;

  // –û–±–Ω–æ–≤–ª—è–µ–º meta-—Ç–µ–≥–∏
  document.querySelector('meta[property="og:url"]').content = pageUrl;
  document.querySelector('meta[property="og:title"]').content = pageTitle;
  document.querySelector('meta[property="og:description"]').content = pageDescription;

  document.querySelector('meta[property="twitter:url"]').content = pageUrl;
  document.querySelector('meta[property="twitter:title"]').content = pageTitle;
  document.querySelector('meta[property="twitter:description"]').content = pageDescription;

  document.querySelector('meta[name="description"]').content = pageDescription;
  document.querySelector('link[rel="canonical"]').href = pageUrl;
}

// –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö URL slug'–æ–≤
function createSafeSlug(text) {
  // –ö–∞—Ä—Ç–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
  const translitMap = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
    '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
    '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
    '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
    '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
    '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
  };
  
  return text
    .split('')
    .map(char => translitMap[char] || char) // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
    .join('')
    .toLowerCase() // –í –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    .replace(/[^a-z0-9\s-]/g, '') // –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
    .replace(/\s+/g, '-') // –ü—Ä–æ–±–µ–ª—ã –≤ –¥–µ—Ñ–∏—Å—ã
    .replace(/-+/g, '-') // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –≤ –æ–¥–∏–Ω
    .replace(/^-+|-+$/g, ''); // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —à–∞—Ä–∏–Ω–≥–∞
async function shareContent(title, url, buttonElement = null) {
  if (navigator.share) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Share API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ (–º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
    try {
      await navigator.share({
        title: title,
        url: url
      });
    } catch (err) {
      console.log('Sharing cancelled');
    }
  } else {
    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    try {
      await navigator.clipboard.writeText(url);
      // –ù–µ–±–æ–ª—å—à–æ–π —Ç–æ–∞—Å—Ç –≤–º–µ—Å—Ç–æ alert
      showToast('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (err) {
      // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      showToast('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é: ' + url);
    }
  }
}

// –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" —Å –æ–ø—Ü–∏—è–º–∏ –∏–∑–æ–ª—è—Ü–∏–∏
document.getElementById('shareBtn').onclick = async () => {
  const btn = document.getElementById('shareBtn');
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
  const choice = await showShareMenu('—Å—Ç–∞—Ç—å–µ–π');
  
  let url = location.href;
  if (choice === 'isolated') {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–π —Ñ–ª–∞–≥ –∏–∑–æ–ª—è—Ü–∏–∏
    url = url.replace('#', '##');
  }
  
  await shareContent(document.title, url, btn);
};

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
const nav = document.getElementById('nav');
document.getElementById('toggleNav').onclick = () => {
  nav.style.display = (nav.style.display === 'block') ? 'none' : 'block';
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
async function loadManifest() {
  if (state.isFileProtocol) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è file:// –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    state.pages = window.embeddedData.pages;
  } else {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è HTTP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    const res = await fetch('pages.json', { cache: 'no-store' });
    state.pages = await res.json();
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
  state.filteredPages = state.pages;
  
  state.fuse = new Fuse(state.pages, { keys: ['title', 'tags', 'slug'], threshold: 0.35, ignoreLocation: true });
  renderList(state.pages);
  renderTags();
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
function renderList(items, activeSlug) {
  const el = document.getElementById('list');
  el.innerHTML = '';
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categorized = groupByCategory(items);
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
  if (categorized.uncategorized && categorized.uncategorized.length === items.length) {
    renderSimpleList(items, activeSlug, el);
    return;
  }
  
  // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  Object.keys(categorized).forEach(categoryName => {
    if (categoryName === 'uncategorized' && categorized[categoryName].length === 0) return;
    
    const pages = categorized[categoryName];
    const categoryId = categoryName.replace(/\s+/g, '-').toLowerCase();
    const isCollapsed = state.collapsedCategories.has(categoryId);
    const icon = pages[0]?.icon || 'üìÅ';
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryHeader = document.createElement('div');
    categoryHeader.className = 'category-header';
    categoryHeader.innerHTML = `
      <div class="category-toggle" data-category="${categoryId}">
        <span class="category-icon">${isCollapsed ? '‚ñ∂' : '‚ñº'}</span>
        <span class="category-name">${icon} ${categoryName === 'uncategorized' ? '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' : categoryName}</span>
        <span class="category-count">${pages.length}</span>
        <button class="category-share-btn" onclick="event.stopPropagation(); shareCategory('${categoryName}', event)" title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π">üîó</button>
      </div>
    `;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    categoryHeader.onclick = (event) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –ù–ï –ø–æ –∫–Ω–æ–ø–∫–µ —à–∞—Ä–∏–Ω–≥–∞
      if (!event.target.classList.contains('category-share-btn')) {
        toggleCategory(categoryId);
      }
    };
    
    el.appendChild(categoryHeader);
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (!isCollapsed) {
      const categoryContent = document.createElement('div');
      categoryContent.className = 'category-content';
      
      pages.forEach(page => {
        const isPrivate = page.public === false;
        const div = document.createElement('div');
        div.className = 'item' + (page.slug === activeSlug ? ' active' : '') + (isPrivate ? ' private' : '');
        div.innerHTML = `
          <div class="item-title">
            ${page.title}
            ${isPrivate ? '<span class="lock-icon">üîí</span>' : ''}
          </div>
          <div class="item-tags">${(page.tags || []).map(t => `<span class="tag">${t}</span>`).join('')}</div>
        `;
        div.onclick = () => { location.hash = '#/p/' + page.slug; };
        categoryContent.appendChild(div);
      });
      
      el.appendChild(categoryContent);
    }
  });
}

// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
function groupByCategory(pages) {
  const groups = {};
  
  pages.forEach(page => {
    const category = page.category || 'uncategorized';
    if (!groups[category]) {
      groups[category] = [];
    }
    groups[category].push(page);
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  const sortedGroups = {};
  const categoryOrder = ['–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã', '–¢—É—Ç–æ—Ä–∏–∞–ª—ã', '–ü—Ä–∏–º–µ—Ä—ã', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ'];
  
  categoryOrder.forEach(cat => {
    if (groups[cat]) {
      sortedGroups[cat] = groups[cat];
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  Object.keys(groups).forEach(cat => {
    if (!categoryOrder.includes(cat)) {
      sortedGroups[cat] = groups[cat];
    }
  });
  
  return sortedGroups;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function openCategory(categorySlug) {
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  // –ò—â–µ–º –ø–æ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É slug'—É
  const categoryPages = state.pages.filter(page => {
    const pageCategoryName = (page.category || 'uncategorized');
    const pageCategorySlug = createSafeSlug(pageCategoryName);
    const targetCategorySlug = categorySlug.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ slug'—É (—Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É)
    return pageCategorySlug === targetCategorySlug && page.public !== false;
  });
  
  if (categoryPages.length === 0) {
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const allCategoryPages = state.pages.filter(page => {
      const pageCategoryName = (page.category || 'uncategorized');
      const pageCategorySlug = createSafeSlug(pageCategoryName);
      const targetCategorySlug = categorySlug.toLowerCase();
      
      return pageCategorySlug === targetCategorySlug;
    });
    
    const categoryName = allCategoryPages[0]?.category || decodeURIComponent(categorySlug).replace(/-/g, ' ');
    showCategoryNotFound(categoryName);
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const actualCategoryName = categoryPages[0]?.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (state.isolatedMode) {
    applyIsolatedCategoryMode(actualCategoryName, categoryPages);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞-—Ç–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  updateMetaTagsForCategory(actualCategoryName, categoryPages);
  
  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  showCategoryPage(actualCategoryName, categoryPages);
}

// –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function showCategoryPage(categoryName, pages) {
  const content = document.querySelector('#content');
  const icon = pages[0]?.icon || 'üìÅ';
  
  content.innerHTML = `
    <div class="category-page">
      <div class="category-page-header">
        <h1>${icon} ${categoryName}</h1>
        <p class="category-description">
          –í—Å–µ–≥–æ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <strong>${pages.length}</strong>
        </p>
        <div class="category-actions">
          <button class="btn btn-share" onclick="shareCategoryPage('${categoryName}', event)">
            üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
          </button>
        </div>
      </div>
      
      <div class="category-page-content">
        ${pages.map(page => `
          <div class="category-page-item" onclick="openPage('${page.slug}')">
            <div class="item-header">
              <span class="item-icon">${page.icon || 'üìÑ'}</span>
              <h3 class="item-title">${page.title}</h3>
            </div>
            <div class="item-meta">
              <div class="item-tags">
                ${(page.tags || []).map(tag => `<span class="tag">${tag}</span>`).join('')}
              </div>
            </div>
          </div>
        `).join('')}
      </div>
    </div>
  `;
  
  // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–∞–π–¥–±–∞—Ä–µ
  highlightActiveCategory(categoryName);
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
function showCategoryNotFound(categoryName) {
  const content = document.querySelector('#content');
  content.innerHTML = `
    <div class="error-page">
      <h1>‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
      <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</p>
      <button class="btn" onclick="location.hash = ''">üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é</button>
    </div>
  `;
}

// –•–µ–ª–ø–µ—Ä: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ meta-—Ç–µ–≥–∞ (–±–µ–∑ –ø–∞–¥–µ–Ω–∏–π, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
function updateMetaTag(key, value) {
  const isProperty = key.includes(':');
  const selector = isProperty ? `meta[property="${key}"]` : `meta[name="${key}"]`;
  let el = document.querySelector(selector);
  if (!el) {
    el = document.createElement('meta');
    if (isProperty) {
      el.setAttribute('property', key);
    } else {
      el.setAttribute('name', key);
    }
    document.head.appendChild(el);
  }
  el.setAttribute('content', value);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function updateMetaTagsForCategory(categoryName, pages) {
  const title = `${categoryName} - Mini Flowy`;
  const description = `–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" —Å–æ–¥–µ—Ä–∂–∏—Ç ${pages.length} —Å—Ç–∞—Ç–µ–π: ${pages.map(p => p.title).join(', ')}`;
  
  const categorySlug = createSafeSlug(categoryName);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
  let url;
  if (window.location.protocol === 'file:') {
    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    url = `${window.location.href.split('#')[0]}#/category/${categorySlug}`;
  } else {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π baseUrl –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    const isGitHubPages = location.hostname.includes('github.io');
    const baseUrl = isGitHubPages ? 
      'https://andrewmoryakov.github.io/mini-flowy-public/' : 
      location.origin + location.pathname;
    url = `${baseUrl}#/category/${categorySlug}`;
  }
  
  document.title = title;
  
  updateMetaTag('description', description);
  updateMetaTag('og:title', title);
  updateMetaTag('og:description', description);
  updateMetaTag('og:url', url);
  updateMetaTag('twitter:title', title);
  updateMetaTag('twitter:description', description);
}

// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function highlightActiveCategory(categoryName) {
  // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É —Å—Ç–∞—Ç–µ–π
  document.querySelectorAll('.item.active').forEach(el => el.classList.remove('active'));
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  document.querySelectorAll('.category-header').forEach(header => {
    const headerCategoryName = header.querySelector('.category-name').textContent.trim();
    if (headerCategoryName.includes(categoryName)) {
      header.classList.add('active-category');
    } else {
      header.classList.remove('active-category');
    }
  });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
function addReturnButton(page) {
  const content = document.getElementById('content');
  const returnBar = document.createElement('div');
  returnBar.className = 'return-bar';
  returnBar.innerHTML = `
    <div class="return-bar-content">
      <button class="btn-return" onclick="exitIsolatedMode()">
        ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      </button>
      <span class="page-info">${page.icon || 'üìÑ'} ${page.title}</span>
    </div>
  `;
  content.parentNode.insertBefore(returnBar, content);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function addCategoryReturnButton(categoryName) {
  const content = document.getElementById('content');
  const returnBar = document.createElement('div');
  returnBar.className = 'return-bar';
  returnBar.innerHTML = `
    <div class="return-bar-content">
      <button class="btn-return" onclick="exitIsolatedMode()">
        ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      </button>
      <span class="page-info">üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}</span>
    </div>
  `;
  content.parentNode.insertBefore(returnBar, content);
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è —Å—Ç–∞—Ç–µ–π
function applyIsolatedMode() {
  document.body.classList.add('isolated-mode');
  // –°–∫—Ä—ã–≤–∞–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –ø–æ–ª–Ω–æ—Å—Ç—å—é
  const aside = document.querySelector('aside');
  if (aside) aside.style.display = 'none';
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function applyIsolatedCategoryMode(categoryName, categoryPages) {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –º–µ–Ω—é
  state.isolatedCategory = categoryName;
  state.isolatedPages = categoryPages;
  
  // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
  renderList(categoryPages, state.currentSlug);
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
async function shareCategoryPage(categoryName, event) {
  // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
  const button = event ? event.target : null;
  
  const categorySlug = createSafeSlug(categoryName);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
  let url;
  if (window.location.protocol === 'file:') {
    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    url = `${window.location.href.split('#')[0]}#/category/${categorySlug}`;
  } else {
    // –î–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    url = `${window.location.origin}${window.location.pathname}#/category/${categorySlug}`;
  }
  
  const title = `${categoryName} - Mini Flowy`;
  
  await shareContent(title, url, button);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —à–∞—Ä–∏–Ω–≥–∞
function showShareMenu(itemType) {
  // –ü—Ä–æ—Å—Ç–æ–π CSS –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é
  const overlay = document.createElement('div');
  overlay.style.cssText = `
    position: fixed; top: 0; left: 0; right: 0; bottom: 0;
    background: rgba(0,0,0,0.5); z-index: 10000;
    display: flex; align-items: center; justify-content: center;
  `;
  
  const menu = document.createElement('div');
  menu.style.cssText = `
    background: white; border-radius: 12px; padding: 24px;
    max-width: 400px; box-shadow: 0 8px 24px rgba(0,0,0,0.15);
  `;
  
  menu.innerHTML = `
    <h3 style="margin: 0 0 16px 0;">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ${itemType}</h3>
    <div style="display: flex; gap: 12px;">
      <button id="shareNormal" style="flex: 1; padding: 12px; border: 1px solid #ddd; border-radius: 8px; background: white; cursor: pointer;">
        üìÑ –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
      </button>
      <button id="shareIsolated" style="flex: 1; padding: 12px; border: 1px solid #ddd; border-radius: 8px; background: white; cursor: pointer;">
        üéØ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
      </button>
    </div>
  `;
  
  overlay.appendChild(menu);
  document.body.appendChild(overlay);
  
  return new Promise((resolve) => {
    menu.querySelector('#shareNormal').onclick = () => {
      document.body.removeChild(overlay);
      resolve('normal');
    };
    
    menu.querySelector('#shareIsolated').onclick = () => {
      document.body.removeChild(overlay);
      resolve('isolated');
    };
    
    overlay.onclick = (e) => {
      if (e.target === overlay) {
        document.body.removeChild(overlay);
        resolve('normal');
      }
    };
  });
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π (–∏–∑ —Å–∞–π–¥–±–∞—Ä–∞) —Å –æ–ø—Ü–∏—è–º–∏ –∏–∑–æ–ª—è—Ü–∏–∏  
async function shareCategory(categoryName, event) {
  // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
  const button = event ? event.target : null;
  
  const categorySlug = createSafeSlug(categoryName);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL
  let baseUrl;
  if (window.location.protocol === 'file:') {
    baseUrl = `${window.location.href.split('#')[0]}`;
  } else {
    baseUrl = `${window.location.origin}${window.location.pathname}`;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
  const choice = await showShareMenu('–∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π');
  
  let url;
  if (choice === 'isolated') {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–π —Ñ–ª–∞–≥ –∏–∑–æ–ª—è—Ü–∏–∏  
    url = `${baseUrl}##/category/${categorySlug}`;
  } else {
    url = `${baseUrl}#/category/${categorySlug}`;
  }
  
  const title = `${categoryName} - Mini Flowy`;
  
  await shareContent(title, url, button);
}

// –ü—Ä–æ—Å—Ç–æ–π toast (–±–µ–∑ alert/prompt)
function showToast(text) {
  const id = 'mini-flowy-toast';
  let el = document.getElementById(id);
  if (!el) {
    el = document.createElement('div');
    el.id = id;
    el.style.cssText = 'position:fixed;bottom:20px;left:50%;transform:translateX(-50%);background:rgba(20,20,20,.9);color:#fff;padding:10px 14px;border-radius:8px;z-index:9999;font-size:14px;opacity:0;transition:opacity .2s ease';
    document.body.appendChild(el);
  }
  el.textContent = text;
  requestAnimationFrame(()=>{ el.style.opacity = '1'; });
  clearTimeout(el._t);
  el._t = setTimeout(()=>{ el.style.opacity = '0'; }, 2000);
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
function renderSimpleList(items, activeSlug, container) {
  items.forEach(p => {
    const div = document.createElement('div');
    div.className = 'item' + (p.slug === activeSlug ? ' active' : '');
    div.innerHTML = `
      <div class="item-title">${p.title}</div>
      <div class="item-tags">${(p.tags || []).map(t => `<span class="tag">${t}</span>`).join('')}</div>
    `;
    div.onclick = () => { location.hash = '#/p/' + p.slug; };
    container.appendChild(div);
  });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function toggleCategory(categoryId) {
  if (state.collapsedCategories.has(categoryId)) {
    state.collapsedCategories.delete(categoryId);
  } else {
    state.collapsedCategories.add(categoryId);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
  localStorage.setItem('collapsedCategories', JSON.stringify([...state.collapsedCategories]));
  
  // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
  renderList(state.filteredPages, getSlugFromHash());
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–µ–≥–æ–≤
function renderTags() {
  const source = getBasePagesForRendering();
  const all = new Set();
  source.forEach(p => (p.tags || []).forEach(t => all.add(t)));
  const el = document.getElementById('tags');
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
  let html = '';
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∏ –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞
  if (state.activeTags.size > 0) {
    html += '<div class="active-filters">';
    html += '<span class="filter-label">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</span>';
    html += [...state.activeTags].map(t => 
      `<span class="tag active" data-tag="${t}">${t} ‚úï</span>`
    ).join(' ');
    html += '<button class="btn-reset-filter">‚úï –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ</button>';
    html += '</div>';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏
  html += '<div class="all-tags">';
  html += [...all].sort().map(t => {
    const isActive = state.activeTags.has(t);
    return `<span class="tag ${isActive ? 'active' : ''}" data-tag="${t}">${t}</span>`;
  }).join(' ');
  html += '</div>';
  
  el.innerHTML = html;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–≥–æ–≤
  el.querySelectorAll('.tag').forEach(tagEl => {
    tagEl.onclick = () => toggleTagFilter(tagEl.dataset.tag);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
  const resetBtn = el.querySelector('.btn-reset-filter');
  if (resetBtn) {
    resetBtn.onclick = () => {
      state.activeTags.clear();
      applyFilters();
      renderTags();
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç–µ–≥—É
function toggleTagFilter(tag) {
  if (state.activeTags.has(tag)) {
    state.activeTags.delete(tag);
  } else {
    state.activeTags.add(tag);
  }
  applyFilters();
  renderTags();
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function applyFilters() {
  const base = getBasePagesForRendering();
  if (state.activeTags.size === 0) {
    state.filteredPages = base;
  } else {
    state.filteredPages = base.filter(page => {
      const pageTags = page.tags || [];
      return [...state.activeTags].every(activeTag => pageTags.includes(activeTag));
    });
  }
  renderList(state.filteredPages, getSlugFromHash());
}

// –ü–æ–∏—Å–∫
document.getElementById('q').addEventListener('input', e => {
  const q = e.target.value.trim();
  const base = getBasePagesForRendering();
  if (!q) { 
    // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ (—Å —É—á–µ—Ç–æ–º –∏–∑–æ–ª—è—Ü–∏–∏) —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const toShow = state.activeTags.size > 0 ? state.filteredPages : base;
    renderList(toShow, getSlugFromHash()); 
    return; 
  }
  
  // –ò—â–µ–º —Å —É—á–µ—Ç–æ–º –∏–∑–æ–ª—è—Ü–∏–∏ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const searchSource = state.activeTags.size > 0 ? state.filteredPages : base;
  const fuse = new Fuse(searchSource, { keys: ['title', 'tags', 'slug'], threshold: 0.35, ignoreLocation: true });
  const res = fuse.search(q).map(r => r.item);
  renderList(res);
});

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ slug –∏–∑ —Ö–µ—à–∞
function getSlugFromHash() {
  const m = location.hash.match(/^#\/p\/([^?]+)/);
  return m ? decodeURIComponent(m[1]) : (state.pages[0]?.slug);
}

// –ë–∞–∑–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ (—É—á–∏—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é)
function getBasePagesForRendering() {
  return (state.isolatedMode && state.isolatedCategory) ? state.isolatedPages : state.pages;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–∑ URL
function getIsolatedModeFromURL() {
  const hash = window.location.hash;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–æ–π–Ω–æ–π —Ö–µ—à –¥–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  if (hash.includes('##')) {
    const parts = hash.split('##');
    return {
      isolated: true,
      route: '#' + parts[1] // –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
    };
  }
  
  return {
    isolated: false,
    route: hash
  };
}

// –†–æ—É—Ç–∏–Ω–≥
function handleRoute() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
  const urlInfo = getIsolatedModeFromURL();
  const wasIsolated = false;
  
  if (urlInfo.isolated) {
    // –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –≤ –∏–∑–æ–ª—è—Ü–∏–∏, URL –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º
    state.isolatedMode = true;
  } else {
    // –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∏–∑–æ–ª—è—Ü–∏–∏
    state.isolatedMode = false;
  }
  
  const hash = urlInfo.route.substring(1);
  
  if (hash.startsWith('/p/')) {
    const slug = hash.substring(3);
    openPage(slug);
  } else if (hash.startsWith('/category/')) {
    const categorySlug = decodeURIComponent(hash.substring(10));
    openCategory(categorySlug);
  } else if (hash.startsWith('/search/')) {
    const query = decodeURIComponent(hash.substring(8));
    state.searchQuery = query;
    document.querySelector('.search input').value = query;
    search();
  } else {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (state.pages.length > 0) {
      openPage(state.pages[0].slug);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–µ—à–∞
window.addEventListener('hashchange', handleRoute);

// –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function openPage(slug) {
  if (!slug) { return; }
  const p = state.pages.find(x => x.slug === slug);
  if (!p) { document.getElementById('content').innerHTML = '<p>–ù–µ –Ω–∞–π–¥–µ–Ω–æ.</p>'; return; }

  // –û–±–Ω–æ–≤–ª—è–µ–º meta-—Ç–µ–≥–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  updateMetaTags(p);
  
  // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  state.currentSlug = slug;
  
  // –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü: —Å–∫—Ä—ã—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
  if (state.isolatedMode) {
    applyIsolatedMode();
  }

  document.getElementById('rawLink').href = p.path;

  let md;
  if (state.isFileProtocol) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è file:// –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    md = window.embeddedData.content[p.path] || `# –û—à–∏–±–∫–∞\n\n–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${p.path}`;
  } else {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è HTTP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    const res = await fetch(p.path, { cache: 'no-store' });
    md = await res.text();
  }

  const html = marked.parse(md, { mangle: false, headerIds: true });
  const root = document.getElementById('content');
  root.innerHTML = html;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Mermaid –¥–∏–∞–≥—Ä–∞–º–º (—á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å MermaidRenderer)
  const blocks = root.querySelectorAll('pre code.language-mermaid');

  // –°–Ω–æ—Å–∏–º —Å—Ç–∞—Ä—ã–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã
  state.pzInstances.forEach(p => p?.destroy?.());
  state.pzInstances = [];

  for (let i = 0; i < blocks.length; i++) {
    const codeEl = blocks[i];
    const code = codeEl.textContent;

    // –°–æ–∑–¥–∞—ë–º —Ä–µ–Ω–¥–µ—Ä
    const renderer = window.MermaidRenderer.renderDiagram(code, i);
    codeEl.closest('pre').replaceWith(renderer.wrap);

    // –†–µ–Ω–¥–µ—Ä–∏–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º pan/zoom
    try {
      const { svg, destroy } = await renderer.mountAndRender();
      const pz = window.PanZoomManager.init(svg, renderer.container);

      // –ö–æ–Ω—Ç—Ä–æ–ª—ã
      renderer.ctrl.addEventListener('click', (e) => {
        const b = e.target.closest('button'); if(!b) return;
        if (b.dataset.act === 'reset') pz.reset();
        if (b.dataset.act === 'download') {
          const blob = new Blob([svg.outerHTML], { type: 'image/svg+xml;charset=utf-8' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url; a.download = `diagram-${i+1}.svg`; a.click(); URL.revokeObjectURL(url);
        }
      });

      state.pzInstances.push({ destroy: ()=>{ destroy(); pz.destroy(); } });
    } catch (err) {
      console.error('Failed to render diagram:', err);
    }
  }
  
  renderList(state.pages, slug);
  if (window.innerWidth < 900) nav.style.display = 'none';
  root.scrollTop = 0;
}

// –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Pan&Zoom
document.getElementById('pz').onchange = (e) => {
  state.pzOn = e.target.checked;
  // –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏/–≤–∫–ª—é—á–µ–Ω–∏–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
  openPage(getSlugFromHash());
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ localStorage
function initializeState() {
  const collapsed = localStorage.getItem('collapsedCategories');
  if (collapsed) {
    try {
      const collapsedArray = JSON.parse(collapsed);
      state.collapsedCategories = new Set(collapsedArray);
    } catch (e) {
      console.warn('Failed to parse collapsed categories from localStorage');
    }
  }
  
  // (removed) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∏–∑–æ–ª—è—Ü–∏–∏ ‚Äî —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø–æ URL —Ñ–ª–∞–≥—É
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –ø—Ä–æ–µ–∫—Ç–µ"
document.getElementById('aboutBtn')?.addEventListener('click', (e) => {
  e.preventDefault();
  showAboutDialog();
});

function showAboutDialog() {
  const version = document.getElementById('version').textContent;
  const about = `üöÄ Mini Flowy v${version}

–õ–µ–≥–∫–∏–π –∏ –±—ã—Å—Ç—Ä—ã–π Markdown + Mermaid –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ —Å –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∑—É–º–æ–º –¥–∏–∞–≥—Ä–∞–º–º.

‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä Markdown –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ Mermaid –¥–∏–∞–≥—Ä–∞–º–º—ã
‚Ä¢ –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–≥–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
‚Ä¢ –¢–µ–º–Ω–∞—è/—Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
‚Ä¢ –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É

üîó GitHub: https://github.com/AndrewMoryakov/mini-flowy
üìÑ –õ–∏—Ü–µ–Ω–∑–∏—è: MIT

–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π.`;
  
  alert(about);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
(async () => {
  initializeState();
  await loadManifest();
  if (!location.hash) { location.hash = '#/p/' + (state.pages[0]?.slug || ''); }
  handleRoute();
})();
